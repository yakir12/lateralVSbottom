#!/bin/bash

#mu1='median.png'		
mask='mask.png'

rm -fr processedata*

find data/* -type d -printf %f\\n | xargs -I fldr mkdir -p processedata/fldr 2processedata/fldr

convert -size 100x100 xc:black -fill white -draw 'circle 50,50,50,5' -colors 2 $mask 

find data/* -name '*.jpg' -type f | parallel -P 1 -q convert -define jpeg:size=200x200 {}[100x100] -set colorspace RGB -strip -colorspace Gray -resize 100x100\!  -contrast-stretch 15% -blur 0x1 \( +clone -blur 0x15 \) -compose Divide_Src -composite -auto-level -blur 0x1 $mask -compose Bumpmap -composite -format png processe{.}.png # \( +clone -median 10 \) -compose Divide_Src -composite -contrast-stretch 15% -blur 0x1 $mask -compose Bumpmap -composite -format png processe{.}.png

#find data/* -name '*.jpg' -type f | parallel -P 1 -q convert {} -set colorspace RGB -strip -colorspace Gray \( +clone -blur 0x40 \) -compose Divide_Src -composite -blur 0x10 -resize 300x300 -contrast-stretch 15% $mask -compose Bumpmap -composite -format png processe{.}.png

# works really well for the first one.
#find data/* -name '*.jpg' -type f | parallel -P 1 -q convert -define jpeg:size=600x600 {}[300x300] -set colorspace RGB -strip -colorspace Gray \( +clone -blur 0x10 \) -compose Divide_Src -composite -blur 0x3 -contrast-stretch 15% $mask -compose Bumpmap -composite -format png processe{.}.png

#find data/* -name '*.jpg' -type f | parallel -P 1 -q convert -define jpeg:size=600x600 {}[300x300] -set colorspace RGB -strip -colorspace Gray \( +clone -blur 0x30 \) -compose Divide_Src -composite -blur 0x1 -contrast-stretch 15%  \( +clone -blur 0x30 \) -compose Divide_Src -composite $mask -compose Bumpmap -composite -format png processe{.}.png
##find data/* -name '*.jpg' -type f | parallel -P 1 -q convert -define jpeg:size=600x600 {} -sample 300x300 -set colorspace RGB -strip -colorspace Gray -contrast-stretch 15% -blur 0x1 \( +clone -blur 0x8 \) -compose Divide_Src -composite $mask -compose Bumpmap -composite -format png processe{.}.png

rm $mask

# find processedata/* -type d | xargs -i convert {}/*.png -evaluate-sequence median {}/$mu1

# find processedata -name '*.png' -type f ! -name $mu1 -execdir convert '{}' $mu1 -compose difference -composite -fx intensity^2 -auto-level '{}' \;;

# ## find processedata/* -type d | xargs -i convert {}/*.png -evaluate-sequence Mean -auto-level {}/$mu2

# ## find processedata/* -type d | parallel Rscript --vanilla --slave try1.R {}


# find processedata/* -name '*.png' -type f | parallel convert {} -morphology Close Disk:10 -threshold 50% 2{} #  -threshold 50% -morphology Close Disk:15 -morphology Smooth Disk:10  '{}' \;;# -threshold 50% -morphology EdgeIn Disk:1 '{}' \;; \( +clone  \) -compose Divide_Src -composite  \( +clone -morphology Close Disk:20 \) -compose plus -composite -black-threshold 50% -morphology Open Disk:10

##find data/* -name '*.jpg' -type f | parallel convert {} -resize 300x300 -set colorspace RGB -auto-level 2processe{.}.png -compose Bumpmap -composite -fuzz 1% -trim -format png 32processe{.}.png