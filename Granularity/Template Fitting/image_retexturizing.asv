clc;
clear all;
close all;
%% Init parameters

verbose = 1; %plot images at the end of execution

%% Read and Pre-process template image %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Read in a template image
template_img = imread('cuttlefish_template2.tif');

% Convert image to grayscale if colored
if size(template_img,3)==3
    template_img=rgb2gray(template_img);
end
template_img = double(template_img);

% Pre-process template to ensure all colors inside the shape are
% black (i.e., value 0) and all colors outside the shape are white
% (i.e., 255)
template_edge = edge(template_img, 'prewitt');
% Go through each column and find the border of template_edge
for ii = 1:size(template_edge,2)
    template_edge_upper = find(template_edge(:,ii),1,'first');
    template_edge_lower = find(template_edge(:,ii),1,'last');
    for jj = 1:size(template_edge,1)
        if jj > template_edge_upper && jj < template_edge_lower
            template_img(jj,ii) = 0;
        else
            template_img(jj,ii) = 255;
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Read and Pre-process orig image %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Read in an original image
orig_img=imread('Cuttlefish3.jpg');
% Convert image to grayscale if colored
if size(orig_img,3)==3
    orig_img=rgb2gray(orig_img);
end

% Pre-process the orig image so the cuttlefish head is facing left
rot_deg = image_rotation(orig_img);
orig_img_rotated = imrotate(orig_img,rot_deg);

% Pre-process orig_img_rotated to ensure all colors inside the shape are
% black (i.e., value 0) and all colors outside the shape are white
% (i.e., 255)
orig_img_rotated(find(orig_img_rotated > 200)) = 0;
orig_img_rotated(find(orig_img_rotated == 0)) = 255;
% Trim the orig_img_rotated of any empty vertical and horizontal edges
orig_rotated_edge = edge(orig_img_rotated, 'prewitt');
rv = [];
cv = [];
for ii = 1:size(orig_rotated_edge,1) % rows
    if isempty(find(orig_rotated_edge(ii,:))) % empty horizontal edge exist
        rv = [rv ii];
    end
end
for ii = 1:size(orig_rotated_edge,2) % columns
    if isempty(find(orig_rotated_edge(:,ii))) % empty vertical edge exist
        cv = [cv ii];
    end
end
orig_img_rotated(rv,:) = [];
orig_img_rotated(:,cv) = [];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Main body of the code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~isa(orig_img_rotated,'uint8') % if not already a type uint8
    orig_img_rotated = uint8(orig_img_rotated);
end

% image_realign() tries realign the template_img and orig_img_rotated such
% that the orig_img_rotated completely overlaps template_img
[retexturized_img flag incdec offset_template] = image_realign(template_img,orig_img_rotated);

partial_coverage = 1;
orig_img_tmp = orig_img_rotated;

while partial_coverage
    if incdec % if need to increase warped_img_rs size       
        sprintf('Increasing orig image size');
        orig_img_tmp = imresize(orig_img_tmp, 1.05); 
        [orig2_img partial_coverage incdec offset_template] = image_realign(template_img,orig_img_tmp);
    else
        sprintf('Decreasing orig image size');
        orig_img_tmp = imresize(orig_img_tmp, 0.95);
        [retexturized_img partial_coverage incdec2 offset_template2] = image_realign(template_img,orig_img_tmp);
        if ~isempty(offset_template2)
            offset_template = offset_template2;
        end
        if ~isempty(retexturized_img)
            final_img = retexturized_img;
        end
        if incdec2 == incdec % the orig2 may still be too big for template
            partial_coverage = 1; % keep the while loop alive
        else
            partial_coverage = 0; % optimal overlaop found, terminal while loop
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Post-processing of final_img by trimming if of any empty vertical
% and horizontal edges
final_img_edge = edge(final_img, 'prewitt');
rv = [];
cv = [];
for ii = 1:size(final_img_edge,1) % rows
    if isempty(find(final_img_edge(ii,:))) % empty horizontal edge exist
        rv = [rv ii];
    end
end
for ii = 1:size(final_img_edge,2) % columns
    if isempty(find(final_img_edge(:,ii))) % empty vertical edge exist
        cv = [cv ii];
    end
end
final_img(rv,:) = [];
final_img(:,cv) = [];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Plotting %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if verbose
    orig_img = uint8(orig_img);
    subplot(2,2,1)
    imshow(orig_img)
    title('Original')
    axis on
    subplot(2,2,2)
    imshow(template_img)
    title('Template')
    axis on
    subplot(2,2,3)
    imshow(orig_img_rotated)
    title('Original Rotated')
    axis on
    subplot(2,2,4)
    imshow(final_img)
    title('Template with Original Texture')
    axis on
end